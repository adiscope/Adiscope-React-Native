# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, min_ios_version_supported
prepare_react_native_project!

linkage = ENV['USE_FRAMEWORKS']
if linkage != nil
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  use_frameworks! :linkage => linkage.to_sym
end

target 'AdiscopeReactNativeExample' do
  config = use_native_modules!

  pod 'AdiscopeAdEvent', '4.3.0'
  pod 'AdiscopeMediaAdManager', '4.3.0'
  pod 'AdiscopeMediaAdMob', '4.3.0'
  pod 'AdiscopeMediaChartBoost', '4.3.0'
  pod 'AdiscopeMediaPangle', '4.3.0'
  pod 'AdiscopeMediaVungle', '4.3.0'
  pod 'AdiscopeMediaMax', '4.3.0'
  pod 'AdiscopeMediaMaxAdapterAdManager', '4.3.0'
  pod 'AdiscopeMediaMaxAdapterAdMob', '4.3.0'
  pod 'AdiscopeMediaMaxAdapterAmazon', '4.3.0'
  pod 'AdiscopeMediaMaxAdapterBidMachine', '4.3.0'
  pod 'AdiscopeMediaMaxAdapterChartBoost', '4.3.0'
  pod 'AdiscopeMediaMaxAdapterDTExchange', '4.3.0'
  pod 'AdiscopeMediaMaxAdapterFan', '4.3.0'
  pod 'AdiscopeMediaMaxAdapterInMobi', '4.3.0'
  pod 'AdiscopeMediaMaxAdapterIronSource', '4.3.0'
  pod 'AdiscopeMediaMaxAdapterMobVista', '4.3.0'
  pod 'AdiscopeMediaMaxAdapterMoloco', '4.3.0'
  pod 'AdiscopeMediaMaxAdapterOgury', '4.3.0'
  pod 'AdiscopeMediaMaxAdapterPangle', '4.3.0'
  pod 'AdiscopeMediaMaxAdapterUnityAds', '4.3.0'
  pod 'AdiscopeMediaMaxAdapterVungle', '4.3.0'

  use_react_native!(
    :path => config[:reactNativePath],
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  target 'AdiscopeReactNativeExampleTests' do
    inherit! :complete
    # Pods for testing
  end

  post_install do |installer|
    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      # :ccache_enabled => true
    )
  end
end
