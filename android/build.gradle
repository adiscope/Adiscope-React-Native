buildscript {
  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.1"
  }
}

def reactNativeArchitectures() {
  def value = rootProject.getProperties().get("reactNativeArchitectures")
  return value ? value.split(",") : ["armeabi-v7a", "x86", "x86_64", "arm64-v8a"]
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["AdiscopeReactNative_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["AdiscopeReactNative_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

android {
  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

repositories {
  mavenCentral()
  google()
}


dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native:+"

  // [required] adiscope core library
  implementation 'com.nps.adiscope:adiscopeCore:3.9.2'
  implementation 'com.nps.adiscope:adiscopeAndroid:1.2.2'
  implementation 'com.nps.adiscope:adapter.admob:22.3.0.5'            // admob
  implementation 'com.nps.adiscope:adapter.max:12.3.1.3'              // max
  implementation 'com.nps.adiscope:adapter.applovin:12.3.1.0'         // applovin
  implementation 'com.nps.adiscope:adapter.chartboost:9.3.1.0'        // chartboost
  implementation 'com.nps.adiscope:adapter.fan:6.13.7.1'              // fan
  implementation 'com.nps.adiscope:adapter.mobvista:16.8.31.0'        // mobvista
  implementation "com.nps.adiscope:adapter.pangle:6.1.0.9.0"          // pangle
  implementation 'com.nps.adiscope:adapter.vungle:7.3.2.0'            // vungle
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "AdiscopeReactNativeView"
    codegenJavaPackageName = "com.adiscope.adiscopereactnative"
  }
}

rootProject.allprojects {
  repositories {
    maven { url 'https://repository.adiscope.com/repository/adiscope/' }
    maven { url "https://s3.amazonaws.com/smaato-sdk-releases/" } // max 연동 시 추가
    maven { url "https://verve.jfrog.io/artifactory/verve-gradle-release" } // max 연동 시 추가
    maven { url "https://artifactory.bidmachine.io/bidmachine" } // max 연동 시 추가
    maven { url "https://maven.ogury.co" } // max 연동 시 추가
    maven { url "https://artifact.bytedance.com/repository/pangle" } // max 혹은 pangle 연동 시 추가
    maven { url "https://dl-maven-android.mintegral.com/repository/mbridge_android_sdk_oversea" } // max 혹은 mobvista 연동 시 추가
    maven { url 'https://cboost.jfrog.io/artifactory/chartboost-ads/' } // chartboost 연동 시 추가
  }
}